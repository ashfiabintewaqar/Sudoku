
package Sudoku;

/**
 *
 * @author Ashfia
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.JPanel;
import java.awt.Color;

/* 
 * This class creates the GUI, Since only one screen is required for displaying the sudoku grid so only one JFrame is necessary
 * It contains a method to create the sudoku grid with buttons
 * And some methods to give functionality to different buttons/menus like New Grid button, Done button, etc.
 */
public class SudokuUI extends javax.swing.JFrame{
    private JButton[][] buttons;
    private ActionListener[][] actionListener;
    private JPanel[][] blocks;
    private SudokuGenerator sudoku;
    private int grid;
    private JPanel inputs;
    private JFrame inputWindow;
    
    public SudokuUI() {
        grid = 9;
        int MD = 35;
        sudoku = new SudokuGenerator(grid, MD);
        sudoku.fillValues();
        initComponents();
        setLocationRelativeTo(null);
        startGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        background1 = new javax.swing.JPanel();
        base = new javax.swing.JPanel();
        gameScreen = new javax.swing.JPanel();
        doneButton = new javax.swing.JButton();
        newGridButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        selectLevelOp = new javax.swing.JMenu();
        level4x4 = new javax.swing.JMenuItem();
        level9x9 = new javax.swing.JMenuItem();
        level16x16 = new javax.swing.JMenuItem();
        exit = new javax.swing.JMenuItem();
        helpOp = new javax.swing.JMenu();
        howToPlay = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sudoku");
        setResizable(false);
        setSize(new java.awt.Dimension(600, 670));
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        background1.setBackground(new java.awt.Color(121, 176, 237));
        background1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 204), 5));
        background1.setPreferredSize(new java.awt.Dimension(600, 670));
        background1.setLayout(null);

        base.setBackground(new java.awt.Color(255, 255, 255));
        base.setPreferredSize(new java.awt.Dimension(580, 600));
        base.setLayout(null);

        gameScreen.setBackground(new java.awt.Color(255, 255, 255));
        gameScreen.setPreferredSize(new java.awt.Dimension(580, 600));
        gameScreen.setLayout(null);
        base.add(gameScreen);
        gameScreen.setBounds(0, 0, 580, 600);

        background1.add(base);
        base.setBounds(10, 10, 580, 600);

        doneButton.setBackground(new java.awt.Color(255, 255, 255));
        doneButton.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        doneButton.setText("Done");
        doneButton.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 204, 102)));
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });
        background1.add(doneButton);
        doneButton.setBounds(320, 620, 120, 35);

        newGridButton.setBackground(new java.awt.Color(255, 255, 255));
        newGridButton.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        newGridButton.setText("New Grid");
        newGridButton.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 204, 102)));
        newGridButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGridButtonActionPerformed(evt);
            }
        });
        background1.add(newGridButton);
        newGridButton.setBounds(170, 620, 120, 35);

        getContentPane().add(background1);

        menuBar.setPreferredSize(new java.awt.Dimension(110, 30));

        selectLevelOp.setText("Select Level");
        selectLevelOp.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        level4x4.setText("4 x 4 Level");
        level4x4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level4x4ActionPerformed(evt);
            }
        });
        selectLevelOp.add(level4x4);

        level9x9.setText("9 x 9 Level");
        level9x9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level9x9ActionPerformed(evt);
            }
        });
        selectLevelOp.add(level9x9);

        level16x16.setText("16 x 16 Level");
        level16x16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level16x16ActionPerformed(evt);
            }
        });
        selectLevelOp.add(level16x16);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        selectLevelOp.add(exit);

        menuBar.add(selectLevelOp);

        helpOp.setText("Help");
        helpOp.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        howToPlay.setText("How to play");
        howToPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                howToPlayActionPerformed(evt);
            }
        });
        helpOp.add(howToPlay);

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        helpOp.add(about);

        menuBar.add(helpOp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void level9x9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level9x9ActionPerformed
        grid = 9;
        int MD = 35;
        sudoku = new SudokuGenerator(grid, MD);
        sudoku.fillValues();
        startGame();
    }//GEN-LAST:event_level9x9ActionPerformed

    private void level16x16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level16x16ActionPerformed
        grid = 16;
        int MD = 50;
        sudoku = new SudokuGenerator(grid, MD);
        sudoku.fillValues();
        startGame();
    }//GEN-LAST:event_level16x16ActionPerformed

    private void level4x4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level4x4ActionPerformed
        grid = 4;
        int MD = 8;
        sudoku = new SudokuGenerator(grid, MD);
        sudoku.fillValues();
        startGame();
    }//GEN-LAST:event_level4x4ActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void newGridButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGridButtonActionPerformed
        sudoku.getNewGridArray();
        int[][] gridArray = sudoku.gridArray;
        createGame(gridArray);
    }//GEN-LAST:event_newGridButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // Checking if all boxes are filled
        boolean areAllBoxesFilled = true;
        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                try{
                    Integer.parseInt(buttons[i][j].getText());
                }catch(NumberFormatException e){
                    areAllBoxesFilled = false;
                    break;
                }
            }
        }
        
        if(areAllBoxesFilled){
            boolean result = sudoku.areInputsCorrect(getInputtedGrid(), grid);
            if(result == true){
                ImageIcon congratzIcon = new ImageIcon("src/congratz.png");
                UIManager.put("OptionPane.messageFont", new Font("VERDANA", 0, 14));
                UIManager.put("OptionPane.minimumSize", new Dimension(300, 120));
                JOptionPane.showMessageDialog(this,"Congratulations! You won.", "Congratulations!", JOptionPane.PLAIN_MESSAGE, congratzIcon);
            } 
            else{
                ImageIcon lostIcon = new ImageIcon("src/lost.jpg");
                UIManager.put("OptionPane.messageFont", new Font("VERDANA", 0, 14));
                UIManager.put("OptionPane.minimumSize", new Dimension(300, 100));
                JOptionPane.showMessageDialog(this,"Sorry, You lost. Please try again!", "Oh! no!", JOptionPane.PLAIN_MESSAGE, lostIcon);
            }
        }
        else{
            UIManager.put("OptionPane.messageFont", new Font("VERDANA", 0, 14));
            UIManager.put("OptionPane.minimumSize", new Dimension(300, 100));
            JOptionPane.showMessageDialog(null,"Please complete the puzzle.", "Complete the puzzle", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_doneButtonActionPerformed

    private void howToPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_howToPlayActionPerformed
        UIManager.put("OptionPane.messageFont", new Font("VERDANA", 0, 14));
        JOptionPane.showMessageDialog(this, "                                   -----------------------------------------------------------------\n                                                                     HOW TO PLAY\n                                   -----------------------------------------------------------------\n" 
        + "Sudoku rules are simple and straightforward. It is precisely their simplicity that makes finding the solution \nand solving these puzzles a true challenge.\n" +
        "A Sudoku puzzle begins with a grid in which some of the numbers are already in place. A puzzle is \ncompleted when each number from 1 to 9 (or according to the selected level) appears only once in each of \nthe rows, columns, and blocks.\n"
        + "The goal of this game is clear: to fill and complete the grid using the numbers from 1 to 9 (or according to \nselected level). The challenging part lays on the restrictions imposed on the player to be able to fill the grid.\n" +
        "\n                                   -----------------------------------------------------------------\n                                                       SUDOKU RULES FOR BEGINNERS\n                                   -----------------------------------------------------------------\n"
        + "\nSudoku Rule 1: Use Numbers 1-9 in 9x9 Sudoku, 1-4 in 4x4 Sudoku and 1-16 in 16x16 Sudoku\nSudoku Rule 2: Don’t Repeat Any Numbers in rows, columns and blocks\nSudoku Rule 3: Don’t Guess\nSudoku Rule 4: Use Process of Elimination"+
        "", "How to Play", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_howToPlayActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        UIManager.put("OptionPane.messageFont", new Font("VERDANA", 0, 16));
        UIManager.put("OptionPane.minimumSize", new Dimension(450, 220));
        ImageIcon jinnahIcon = new ImageIcon("src/jinnahlogo.jpg");
        JOptionPane.showMessageDialog(this, "  PROJECT MEMBERS:\n  Ashfia Binte Waqar\n  Syeda Urooj Muzaffar\n  Syeda Ayesha Khateeb\n\n  INSTITUTE: Jinnah University For Women\n\n", "About", JOptionPane.PLAIN_MESSAGE, jinnahIcon);
    }//GEN-LAST:event_aboutActionPerformed
    
    // Returns the user's inputted result grid
    private int[][] getInputtedGrid(){
        int inputtedGrid[][] = new int[grid][grid];

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                try {
                    inputtedGrid[i][j] = Integer.parseInt(buttons[i][j].getText());
                } catch (NumberFormatException e) {
                    inputtedGrid[i][j] = 0;
                }
            }
        }
        return inputtedGrid;
    }
    
    // Assigns the matrix array from SudokuGenerator.java to gridArray and calls the creatGame method to create the game screen
    private void startGame(){
        int[][] gridArray = sudoku.gridArray;
        createGame(gridArray);
    }
    
    // Creates the main game screen
    private void createGame(int[][] gridArray){
        gameScreen.removeAll();
        grid = gridArray.length;
        blocks = new JPanel[grid][grid];
        buttons = new JButton[grid][grid];
        actionListener = new ActionListener[grid][grid];
        gameScreen.setLayout(new GridLayout(grid, grid));
        int innerBoxRows = sudoku.SRN;

        for (int i = 0; i < grid; i++) {
            for (int j = 0; j < grid; j++) {
                blocks[i][j] = new JPanel();
                buttons[i][j] = new JButton();
                buttons[i][j].setMargin(new Insets(5, 5, 5, 5));
                String text = "";
                if (0 < gridArray[i][j] && gridArray[i][j] <= grid) {
                    text += gridArray[i][j];
                } else {
                    final JButton tempbutton = buttons[i][j];
                    final JPanel tempBlock = blocks[i][j];
                    buttons[i][j].addActionListener(new ActionListener(){
                        public void actionPerformed(ActionEvent e) {
                            displayInputs(tempBlock, tempbutton, grid);
                        }
                    });
                }
                buttons[i][j].setText(text);
                switch(grid){
                    case 4:
                        buttons[i][j].setFont(new java.awt.Font("TAHOMA", 0, 30));
                        break;
                    case 9:
                        buttons[i][j].setFont(new java.awt.Font("TAHOMA", 0, 24));
                        break;
                    case 16:
                        buttons[i][j].setFont(new java.awt.Font("TAHOMA", 0, 18));
                        break;
                }
                buttons[i][j].setForeground(Color.BLACK);
                // This if-else if Ladder sets the background color of the buttons in a way that they are divided into SRN x SRN boxes
                if(((i >= 0 && i < innerBoxRows) || (i >= innerBoxRows * 2 && i < Math.sqrt(grid)*3)) && (j >= innerBoxRows && j < Math.sqrt(grid)*2) || (i < innerBoxRows && j >= 12 && i < innerBoxRows*2) || (i>=innerBoxRows*2 && j>=12 && i < innerBoxRows*3)) {
                    buttons[i][j].setBackground(new java.awt.Color(255, 255, 255));
                } else if((i >= innerBoxRows && i < innerBoxRows * 2) && ((j >= 0 && j < innerBoxRows) || (j >= Math.sqrt(grid)*2 && j < Math.sqrt(grid)*3)) || (i >= 12 && j < innerBoxRows && j < innerBoxRows*2) || (i >= 12 && j < innerBoxRows*3 && j >= innerBoxRows*2)) {
                    buttons[i][j].setBackground(new java.awt.Color(255, 255, 255));
                } else{
                    buttons[i][j].setBackground(new java.awt.Color(227, 240, 255));
                }
                blocks[i][j].setLayout(new GridLayout(1, 1));
                blocks[i][j].add(buttons[i][j]);
                gameScreen.add(blocks[i][j]);
            }
        }
        // Upon pressing New Grid Button we clear the base and add the new grid onto the game screen
        base.removeAll();
        base.add(gameScreen);
        gameScreen.repaint();
        base.repaint();
        this.setVisible(true);
    }
    
    // Action Event for inputting on empty blocks
    public void displayInputs(JPanel block, JButton inputButton, int numOfInput){
        inputs = new InputsUI(this, block, inputButton, grid);
        inputs.setBounds(8, 10, 570, 150);
        inputWindow = new JFrame("Input number");
        if(grid == 9){
            inputWindow.setSize(565, 90);
        } else if(grid == 4){
            inputWindow.setSize(265, 90);
        } else{
            inputWindow.setSize(505, 150);
        }
        inputWindow.getRootPane().setBorder(
        BorderFactory.createMatteBorder(4, 4, 4, 4, new java.awt.Color(45, 112, 186)));
        inputWindow.setLayout(null);
        inputWindow.setLocationRelativeTo(this);
        inputWindow.add(inputs);
        inputWindow.setUndecorated(true);
        disable();
        inputWindow.setVisible(true);
    }
    
    // Sets the user given input on the selected button
    public void setInput(String input, JPanel block, JButton inputButton){
        enable();
        block.removeAll();
        inputButton.setText(input);
        inputButton.setFont(new java.awt.Font("TAHOMA", 1, 24));
        if(grid == 16)
            inputButton.setFont(new java.awt.Font("TAHOMA", 1, 16));
        inputButton.setForeground(new java.awt.Color(45, 112, 186));
        block.add(inputButton);
        inputWindow.setVisible(false);
        this.repaint();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JPanel background1;
    private javax.swing.JPanel base;
    private javax.swing.JButton doneButton;
    private javax.swing.JMenuItem exit;
    private javax.swing.JPanel gameScreen;
    private javax.swing.JMenu helpOp;
    private javax.swing.JMenuItem howToPlay;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenuItem level16x16;
    private javax.swing.JMenuItem level4x4;
    private javax.swing.JMenuItem level9x9;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton newGridButton;
    private javax.swing.JMenu selectLevelOp;
    // End of variables declaration//GEN-END:variables
}
